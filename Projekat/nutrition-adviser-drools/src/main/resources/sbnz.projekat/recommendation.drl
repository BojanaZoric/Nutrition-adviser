package sbnz.projekat;
import sbnz.projekat.nutritionadviser.model.*;
import java.util.*;
import java.time.LocalDate;

rule "Find meal that has all groceries"
	 agenda-group "recommendation"
	 lock-on-active true
	 when
		 $meal: Meal($allGroceries: groceries, $name: name);
		 $pm: PossibleMeals();
		 $gl: GrocerieList($usersGroceries: grocerieList);
		 $usersGroceriesIDS: List() from accumulate (
		 Grocerie($id: id) from $usersGroceries,
			collectList($id)
		 )
		 checkMealGroceriesAll($allGroceries,
		 $usersGroceriesIDS;);
	 then
	 	$pm.getMeals().add($meal);
	 	System.out.println($allGroceries.size());
	 	System.out.println($usersGroceriesIDS.size());
end

rule "Find missing groceries from meal"
	 agenda-group "recommendation-missing"
	 lock-on-active true
	 when
		 $meal: Meal($allGroceries: getComponents(), $name: name);
		 $gl: GrocerieList($usersGroceries: grocerieList);
		 $mg: MissingGroceries()
		 $usersGroceriesIDS: List() from accumulate (
		 Grocerie($id: id) from $usersGroceries,
			collectList($id)
		 )
		 
		 $missingGroceries := List() from accumulate(
		 Grocerie($id: id, $grocerie: this, $id not memberOf
		$usersGroceriesIDS) from $allGroceries, collectList($grocerie))
	 then
	 	$mg.getGroceries().addAll($missingGroceries);
	 	System.out.println($missingGroceries.size());
end
	
query checkMealGroceriesAll(Set $allGroceries, List $usersGroceriesIDS)
	 $num := Number(intValue == $usersGroceriesIDS.size()) from
		accumulate(GrocerieQuantity($id: grocerie.id, $id memberOf $usersGroceriesIDS) from $allGroceries,
	 init(int count = 0;),
	 action(count += 1;),
	 result(count)
 )
end

rule "Find meal that has all groceries and more"
	 agenda-group "recommendation-more"
	 lock-on-active true
	 when
		 $meal: Meal($allGroceries: getComponents(), $name: name);
		 $pm: PossibleMeals();
		 $gl: GrocerieList($usersGroceries: grocerieList);
		 $usersGroceriesIDS: List() from accumulate (
		 Grocerie($id: id) from $usersGroceries,
			collectList($id)
		 )
		 checkMealGroceries($allGroceries,
		 $usersGroceriesIDS;);
	 then
	 	$pm.getMeals().add($meal);
	end
	
query checkMealGroceries(List $allGroceries, List $usersGroceriesIDS)
	 $num := Number(intValue >= $usersGroceriesIDS.size()) from
		accumulate(Grocerie($id: id, $id memberOf $usersGroceriesIDS) from $allGroceries,
	 init(int count = 0;),
	 action(count += 1;),
	 result(count)
 )
end

rule "Calorie limit exceeded"
	 agenda-group "calorie-limit"

    when
        $u: UserData($mealDetails: getDetails())
        $sumCalories : Number(intValue > 1800 ) from accumulate(
         	MealDetails($d: this, $date: date, $date.isAfter(LocalDate.now().minusDays(1)), $meal: meal) from $mealDetails,
         	sum($meal.getCalories())
         )
    then
        System.out.println("Presao si broj kalorija druze");

end